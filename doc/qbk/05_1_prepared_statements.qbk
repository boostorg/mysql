[/
    Copyright (c) 2019-2023 Ruben Perez Hidalgo (rubenperez038 at gmail dot com)
   
    Distributed under the Boost Software License, Version 1.0. (See accompanying
    file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
]

[section:prepared_statements Prepared statements]

This section covers using [mysqllink sql-prepared-statements.html
server-side prepared statements]. You should use them whenever a query
contains parameters not known at compile-time.

[heading Preparing a statement]

To prepare a statement, call [refmem connection prepare_statement]
or [refmem connection async_prepare_statement], passing your statement
as a string. This yields a [reflink statement] object:

[prepared_statements_prepare]

The question mark characters (`?`) represent parameters 
(as described [mysqllink prepare.html here]).
When you execute the statement (next section), you
provide values for each of the parameters you declared, and the server
will use these values to run the statement.

[heading Executing a statement]

To execute a statement, use any of the following functions:

* [refmem connection execute_statement] or [refmem connection async_execute_statement],
  which execute the statement and read the generated rows.
* [refmem connection start_statement_execution] and [refmem connection async_start_statement_execution], which initiate a
  statement execution as a multi-function operation.

For example:

[prepared_statements_execute]

Some observations:

* You must pass in [*exactly as many parameters
  as the statement has]. Failing to do so will result in an error.
* You don't need to sanitize the parameters anyhow. The server takes care of it.
* Actual parameters are matched to `?` placeholders by order. 
* Parameters are passed as a `std::tuple`. You can pass in built-in integers,
  `float`, `double`, [reflink date], [reflink datetime], [reflink time],
  [reflink field_view] and [reflink field] objects as parameters.
* `show_in_store` is passed as an `int` to `execute_statement()`, but is defined as a `TINYINT`
  (1 byte integer) in the table. As long as the passed integer is in range, MySQL
  will perform the required conversions. Otherwise, `execute_statement()` will fail with an error
  (no undefined behavior is invoked).

You can also pass [reflink field_view]s and [reflink field]s as parameters. This is handy
to insert `NULL` values:

[prepared_statements_execute_null]

For a full reference on the types you can pass as parameters when
executing a statement, see [link mysql.fields.cpp_to_mysql this section].

[heading Closing a statement]

Prepared statements are created server-side, and thus consume server resources. If you don't need a 
[reflink statement] anymore, you can call [refmem connection close_statement] or
[refmem connection async_close_statement] to instruct the server to deallocate it.

Prepared statements are managed by the server on a per-connection basis. Once you close your connection
with the server, all prepared statements you have created using this connection will be automatically
deallocated.

If you are creating your prepared statements at the beginning
of your program and keeping them alive until the connection
is closed, then there is no need to call `close_statement()`,
as closing the connection will do the cleanup
for you. If you are creating and destroying prepared statements
dynamically, then it is advised to use `close_statement()` to prevent excessive
resource usage in the server.

Finally, note that [reflink statement]'s destructor
does not perform any server-side deallocation of the statement.
This is because closing a statement involves a network
operation that may block or fail.

[endsect]
