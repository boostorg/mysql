[/
    Copyright (c) 2019-2023 Ruben Perez Hidalgo (rubenperez038 at gmail dot com)
   
    Distributed under the Boost Software License, Version 1.0. (See accompanying
    file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
]


[section:fields Fields]
[nochunk]

This section delves deeper on how to use [reflink field] and [reflink field_view]
and its underlying types. Please make sure you've read [link mysql.overview.fields this section]
before going on.

[section field_view vs field]

This library implements two types representing the concept of a field: [reflink field_view], which is non-owning,
and [reflink field], which is owning. The relationship between them is similar to the one between
`std::string_view` and `std::string`.

For efficiency reasons, all library functions return `field_view`s. For example:

[fields_field_views]

When dealing with scalars (anything that is neither a string nor a blob), `field_view`'s accessors make
a copy of the scalar:

[fields_field_views_scalars]

`field_view`s are cheap to create and to copy, as they are small objects and don't perform
any memory allocations. They are also immutable. On the other hand, `field`s may be more
expensive to create and copy, as they may perform memory allocations.

You may create a `field` from a `field_view`, taking ownership of its contents:

[fields_taking_ownership]

`field` and `field_view` use the same underlying types for scalars. For strings and blobs,
`field` uses the owning types `std::string` and [reflink blob], while `field_view` uses the
reference types [reflink string_view] and [reflink blob_view].

`field` accessors return references, which allow you to mutate the underlying object:

[field_accessor_references]

You can also mutate a `field` using the assignment operator. This allows you to also
change the underlying type of a `field`:

[field_assignment]

[endsect]

[section Arithmetic types]

This library uses `std::int64_t` to represent all MySQL signed integers (`TINYINT`, `SMALLINT`, `MEDIUMINT`...).
Similarly, unsigned integers use `std::uint64_t`, 32-bit floats use `float` and 64-bit doubles
use `double`.

[endsect]

[section String types]

String types (`CHAR`, `VARCHAR`, `TEXT`, `SET`...) are represented as string fields, which
translates into [reflink string_view] for `field_view` and `std::string` for `field`.

This library performs no character set conversion on strings. All strings are provided
as the server sends them. If you've issued a `"SET NAMES <charset-name>"` statement,
strings will be encoded according to `<charset-name>`. For details, see [link mysql.charsets this section].

The `JSON` type is represented as a string containing the serialized JSON value.
The `DECIMAL` type is also provided as a string, to avoid losing precision.

[endsect]

[section Blob types]

The types `BINARY`, `VARBINARY` and `BLOB` (of any size) are represented as blob fields,
which are similar to string fields, but represent binary data instead of characters.
The following types are used:

* [reflink blob_view] is used by `field_view`. It's an alias for [@boost:/doc/html/core/span.html `boost::span<const unsigned char>`]
  (a C++11 backport of `std::span`).
* [reflink blob] is used by `field`. It's an alias for `std::vector<unsigned char>`.

If MySQL adds any other type that this library doesn't understand, it is also represented as a blob.

[endsect]

[section The DATE type]

MySQL __DATE__ is represented as [reflink date] in C++. `date` holds the year, month and day components of a date.
It is a type close to the protocol, rather than a vocabulary type. The main reason for using `date` instead
of a `std::chrono::time_point` type is that, under certain configurations, MySQL allows storing invalid
dates, such as `2020-00-01`. These are not representable as a `std::chrono::time_point`.

Unless dealing with these special values, we recommend converting `date`s to a `time_point` before using them.
The member type [refmem date time_point] is a system-clock `time_point` that can represent the entire
MySQL `DATE` range without problems. You can use [refmem date as_time_point] to perform the cast:

[field_date_as_time_point]

If the date is not valid, `as_time_point` will throw an exception.

You can query whether a `date` contains a valid date or not using [refmem date valid]:

[field_date_valid]

You can combine it with [refmem date get_time_point], which performs an unchecked
conversion:

[field_date_get_time_point]

You can also construct a `date` from a `time_point`. If the `time_point` is
out of range, an exception is thrown.

[endsect]

[section The DATETIME and TIMESTAMP types]

Both types are represented as [reflink datetime] in C++. `datetime` represents a broken time point,
having year, month, day, hour, minute, second and microseconds.

MySQL also accepts invalid datetimes (like `2020-00-10 10:20:59.000000`). The same considerations for
`date` apply:

[field_datetime]

The `datetime` object doesn't carry any time zone information with it. The time zone semantics
depend on the actual MySQL type:

* __DATETIME__ is a "naive" time point object. It represents a time point without any time zone
  information at all. It is up to the user to interpret which time zone the object is in.
* When a __TIMESTAMP__ object is inserted, it is interpreted  to be in the connection's local time zone,
  as given by the __time_zone__ variable, and converted to UTC for storage. When retrieved, it is converted back
  to the time zone indicated by __time_zone__. The retrieved value of a `TIMESTAMP`
  field is thus a time point in some local time zone, dictated by the current
  __time_zone__ variable. As this variable can be changed programmatically from SQL, without
  the library knowing it, we represent `TIMESTAMP`'s using the `datetime` object, which doesn't include time zone information.

When using `TIMESTAMP`, we recommend setting the __time_zone__ to a known value. To illustrate this,
consider an event-logging system with the following table definition:

[field_timestamp_setup]

We will be inserting events with an explicit timestamp. We may also want to retrieve events with
a timestamp filter. This is what our prepared statements would look like:

[field_timestamp_stmts]

These statements may be run from different parts of our code, or even from different applications.
To get consistent results, we must make sure that the time zones used during insertion and retrieval are the same.
By default, __time_zone__ gets set to `SYSTEM`, which will use the server's time zone settings.
This is not what we want here, so let's change it:

[fields_timestamp_set_time_zone]

With this, the insertion code can look like:

[fields_timestamp_insert]

The querying code would be:

[fields_timestamp_select]
    
If you don't set __time_zone__, you may apparently get the right results if you run
both insertions and queries from clients that don't set `time_zone` and the server doesn't
change its configuration. However, relying on this will make your applications brittle, so we
don't recommend it.

[endsect]

[section The TIME type]

The __TIME__ type is a signed duration with a resolution of one microsecond.
It is represented using the [reflink time] type, an alias for a
`std::chrono::duration` specialization with microseconds as period.

[endsect]

[section Field accessors]

[link mysql.overview.fields.accessors This table] summarizes the 
available accesors for `field_view` and `field`.

[endsect]

[section MySQL to C++ type mappings]

The following table reflects mapping from database types to C++ types.
The range column shows the range of values that MySQL admits for that type. This library
guarantees that any field retrieved from the database honors that range. The `column_type`
column shows what [refmem metadata type] would return for a column of that type.

[table
    [
        [MySQL type]
        [`field_kind`]
        [C++ type]
        [Range]
        [`column_type`]
        [Considerations]
    ]
    [
        [__TINYINT__]
        [`int64`]
        [`std::int64_t`]
        [`-0x80` to `0x7f`]
        [`tinyint`]
        [1 byte integer]
    ]
    [
        [__TINYINT__ `UNSIGNED`]
        [`uint64`]
        [`std::uint64_t`]
        [`0` to `0xff`]
        [`tinyint`]
        [1 byte integer]
    ]
    [
        [__SMALLINT__]
        [`int64`]
        [`std::int64_t`]
        [`-0x8000` to `0x7fff`]
        [`smallint`]
        [2 byte integer]
    ]
    [
        [__SMALLINT__ `UNSIGNED`]
        [`uint64`]
        [`std::uint64_t`]
        [`0` to `0xffff`]
        [`smallint`]
        [2 byte integer]
    ]
    [
        [__MEDIUMINT__]
        [`int64`]
        [`std::int64_t`]
        [`-0x800000` to `0x7fffff`]
        [`mediumint`]
        [3 byte integer]
    ]
    [
        [__MEDIUMINT__ `UNSIGNED`]
        [`uint64`]
        [`std::uint64_t`]
        [`0` to `0xffffff`]
        [`mediumint`]
        [3 byte integer]
    ]
    [
        [__INT__]
        [`int64`]
        [`std::int64_t`]
        [`-0x80000000` to `0x7fffffff`]
        [`int_`]
        [4 byte integer]
    ]
    [
        [__INT__ `UNSIGNED`]
        [`uint64`]
        [`std::uint64_t`]
        [`0` to `0xffffffff`]
        [`int_`]
        [4 byte integer]
    ]
    [
        [__BIGINT__]
        [`int64`]
        [`std::int64_t`]
        [`-0x8000000000000000` to `0x7fffffffffffffff`]
        [`bigint`]
        [8 byte integer]
    ]
    [
        [__BIGINT__ `UNSIGNED`]
        [`uint64`]
        [`std::uint64_t`]
        [`0` and `0xffffffffffffffff`]
        [`bigint`]
        [8 byte integer]
    ]
    [
        [__YEAR__]
        [`uint64`]
        [`std::uint64_t`]
        [\[`1901`, `2155`\], plus zero]
        [`year`]
        [
            1 byte integer type used to represent years

            Zero is often employed to represent invalid year values. We represent zero year as a numeric 0.
        ]
    ]
    [
        [__BIT__]
        [`uint64`]
        [`std::uint64_t`]
        [Depends on the bitset width. Max `0` to `0xffffffffffffffff`.]
        [`bit`]
        [
            A bitset between 1 and 64 bits wide.
        ]
    ]
    [
        [__FLOAT__]
        [`float_`]
        [`float`]
        [IEEE 754 `float` range]
        [`float_`]
        [
            4 byte floating point type
        ]
    ]
    [
        [__DOUBLE__]
        [`double_`]
        [`double`]
        [IEEE 754 `double` range]
        [`double_`]
        [
            8 byte floating point type
        ]
    ]
    [
        [__DATE__]
        [`date`]
        [[reflink date]]
        [
            \[[reflink min_date], [reflink max_date]\] (some MySQL implementations may allow a narrower range),
            plus invalid and zero dates (see __allow_invalid_dates__ and  __strict_sql__).
        ]
        [`date`]
        []
    ]
    [
        [__DATETIME__]
        [`datetime`]
        [[reflink datetime]]
        [
            \[[reflink min_datetime], [reflink max_datetime]\] (some MySQL implementations may allow a narrower range),
            plus invalid and zero datetimes (see __allow_invalid_dates__ and  __strict_sql__).
        ]
        [`datetime`]
        [
            Time point type without time zone, with a resolution of one microsecond.
        ]
    ]
    [
        [__TIMESTAMP__]
        [`datetime`]
        [[reflink datetime]]
        [
            \[[reflink min_datetime], [reflink max_datetime]\] (the actual MySQL supported range is usually
            narrower, but we don't enforce it in the client), plus zero timestamps (see __strict_sql__).
        ]
        [`timestamp`]
        [
            Time point type with a resolution of one microsecond.
        ]
    ]
    [
        [__TIME__]
        [`time`]
        [[reflink time]]
        [
            \[[reflink min_time], [reflink max_time]\]
        ]
        [`time`]
        [
            Signed time duration, with a resolution of one microsecond.
        ]
    ]
    [
        [__CHAR__]
        [`string`]
        [[reflink string_view] or `std::string`]
        []
        [`char_`]
        [
            Fixed-size character string.
        ]
    ]
    [
        [__VARCHAR__]
        [`string`]
        [[reflink string_view] or `std::string`]
        []
        [`varchar`]
        [
            Variable size character string with a maximum size.
        ]
    ]
    [
        [__TEXT__ (all sizes)]
        [`string`]
        [[reflink string_view] or `std::string`]
        []
        [`text`]
        [
            Variable size character string.
        ]
    ]
    [
        [__ENUM__]
        [`string`]
        [[reflink string_view] or `std::string`]
        []
        [`enum_`]
        [
            Character string with a fixed set of possible values (only one possible).
        ]
    ]
    [
        [__SET__]
        [`string`]
        [[reflink string_view] or `std::string`]
        []
        [`set`]
        [
            Character string with a fixed set of possible values (many possible).
        ]
    ]
    [
        [__JSON__]
        [`string`]
        [[reflink string_view] or `std::string`]
        []
        [`json` (MySQL) or `text` (MariaDB)]
        [
            A serialized JSON value of any type.
            
            Note that [refmem metadata type] is different depending on the DB system. MySQL has a dedicated `JSON` type, while in MariaDB `JSON` is an alias for `LONGTEXT`. JSON values are represented as strings by this library in both cases.
        ]
    ]
    [
        [__DECIMAL__/__NUMERIC__]
        [`string`]
        [[reflink string_view] or `std::string`]
        [Depends on the column definition]
        [`decimal`]
        [
            A fixed precision numeric value. In this case, the string will contain
            the textual representation of the number (e.g. the string `"20.52"` for `20.52`).
        ]
    ]
    [
        [__BINARY__]
        [`blob`]
        [[reflink blob_view] or [reflink blob]]
        []
        [`binary`]
        [
            Fixed-size blob.
        ]
    ]
    [
        [__VARBINARY__]
        [`blob`]
        [[reflink blob_view] or [reflink blob]]
        []
        [`varbinary`]
        [
            Variable size blob with a maximum size.
        ]
    ]
    [
        [__BLOB__ (all sizes)]
        [`blob`]
        [[reflink blob_view] or [reflink blob]]
        []
        [`blob`]
        [
            Variable size blob.
        ]
    ]
    [
        [__GEOMETRY__]
        [`blob`]
        [[reflink blob_view] or [reflink blob]]
        []
        [`geometry`]
        [
            Any of the spatial data types. The string contains the binary representation of the geometry type.
        ]
    ]
]

[endsect]


[section:cpp_to_mysql C++ to MySQL type mapping reference]

This section shows how a parameter `v` in a expression `conn.execute_statement(stmt, std::make_tuple(v), result)`
is interpreted by MySQL, depeding on `v`'s type:

[table
    [
        [C++ type]
        [MySQL type]
        [Compatible with...]
    ]
    [
        [`signed char`, `short`, `int`, `long`, `long long`]
        [`BIGINT`]
        [Signed `TINYINT`, `SMALLINT`, `MEDIUMINT`, `INT`, `BIGINT`]
    ]
    [
        [`unsigned char`, `unsigned short`, `unsigned int`, `unsigned long`, `unsigned long long`]
        [`UNSIGNED BIGINT`]
        [Unsigned `TINYINT`, `SMALLINT`, `MEDIUMINT`, `INT`, `BIGINT`, `YEAR`, `BIT`]
    ]
    [
        [`std::string`, [reflink string_view], `std::string_view`, `const char*`]
        [`VARCHAR`]
        [`CHAR`, `VARCHAR`, `TEXT` (all sizes), `ENUM`, `SET`, `JSON`, `DECIMAL`, `NUMERIC`]
    ]
    [
        [[reflink blob], [reflink blob_view]]
        [`BLOB`]
        [`BINARY`, `VARBINARY`, `BLOB` (all sizes), `GEOMETRY`]
    ]
    [
        [`float`]
        [`FLOAT`]
        [`FLOAT`]
    ]
    [
        [`double`]
        [`DOUBLE`]
        [`DOUBLE`]
    ]
    [
        [[reflink date]]
        [`DATE`]
        [`DATE`]
    ]
    [
        [[reflink datetime]]
        [`DATETIME`]
        [`DATETIME`, `TIMESTAMP`]
    ]
    [
        [[reflink time]]
        [`TIME`]
        [`TIME`]
    ]
    [
        [`std::nullptr_t`]
        [`NULL`]
        [Any of the other types. Used to insert `NULL`s, for example.]
    ]
    [
        [[reflink field_view]]
        [Depends on the actual type stored by the field]
        []
    ]
    [
        [[reflink field]]
        [Depends on the actual type stored by the field]
        []
    ]
]

[endsect]

[endsect]
