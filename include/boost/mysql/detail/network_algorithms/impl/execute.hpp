//
// Copyright (c) 2019-2023 Ruben Perez Hidalgo (rubenperez038 at gmail dot com)
//
// Distributed under the Boost Software License, Version 1.0. (See accompanying
// file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
//

#ifndef BOOST_MYSQL_DETAIL_NETWORK_ALGORITHMS_IMPL_EXECUTE_HPP
#define BOOST_MYSQL_DETAIL_NETWORK_ALGORITHMS_IMPL_EXECUTE_HPP

#pragma once

#include <boost/mysql/detail/network_algorithms/execute.hpp>
#include <boost/mysql/detail/network_algorithms/read_resultset_head.hpp>
#include <boost/mysql/detail/network_algorithms/start_execution.hpp>
#include <boost/mysql/detail/protocol/deserialize_row.hpp>
#include <boost/mysql/detail/protocol/execution_state_impl.hpp>

#include <boost/asio/coroutine.hpp>

namespace boost {
namespace mysql {
namespace detail {

// Rows generated by execute() are stored in a row_impl object in the execution_state.
// All rows from all resultsets are gathered into a single object. This is done in this steps:
// - Rows are read directly into memory owned by the row_impl. string/blob field_view's point into the
//   connection's internal buffer.
// - These strings/blobs are copied into row_impl's character buffer, and transformed into offsets,
//   to allow buffer resizing.
// - When there are no more rows to read, field_view's are transformed back into string_views/blob_views.

// This class helps with doing the above without errors
class row_gatherer
{
    row_impl& obj_;
    std::size_t num_cols_;
    std::size_t size_before_;
    std::size_t num_rows_{};

public:
    row_gatherer(row_impl& obj, std::size_t num_cols) noexcept
        : obj_(obj), num_cols_(num_cols), size_before_(obj.fields().size())
    {
    }

    field_view* add_row()
    {
        auto res = obj_.add_fields(num_cols_);
        ++num_rows_;
        return res;
    }

    void copy_strings_as_offsets() { obj_.copy_strings_as_offsets(size_before_, num_cols_ * num_rows_); }
};

// Read this as "process rows generated by execute"
inline void process_execute_rows(
    channel_base& chan,
    execution_state_impl& st,
    error_code& err,
    diagnostics& diag
)
{
    assert(chan.has_read_messages());

    row_gatherer gatherer(st.rows(), st.current_resultset_meta().size());

    while (chan.has_read_messages() && st.should_read_rows())
    {
        // Get the row message
        auto message = chan.next_read_message(st.sequence_number(), err);
        if (err)
            return;

        // Deserialize the row
        field_view* storage = gatherer.add_row();
        deserialize_row(message, chan.current_capabilities(), chan.flavor(), st, storage, err, diag);
        if (err)
            return;
    }

    // Copy any string field, as the network buffer will be overwritten
    gatherer.copy_strings_as_offsets();
}

template <class Stream>
struct execute_op : boost::asio::coroutine
{
    channel<Stream>& chan_;
    error_code fast_fail_;
    resultset_encoding enc_;
    execution_state_impl& st_;
    diagnostics& diag_;

    execute_op(
        channel<Stream>& chan,
        error_code fast_fail,
        resultset_encoding enc,
        execution_state_impl& st,
        diagnostics& diag
    ) noexcept
        : chan_(chan), fast_fail_(fast_fail), enc_(enc), st_(st), diag_(diag)
    {
    }

    template <class Self>
    void operator()(Self& self, error_code err = {})
    {
        // Error checking
        if (err)
        {
            self.complete(err);
            return;
        }

        // Normal path
        BOOST_ASIO_CORO_REENTER(*this)
        {
            BOOST_ASIO_CORO_YIELD
            async_start_execution(chan_, fast_fail_, enc_, st_, diag_, std::move(self));

            while (!st_.complete())
            {
                while (st_.should_read_rows())
                {
                    // Ensure we have messages to be read
                    if (!chan_.has_read_messages())
                    {
                        BOOST_ASIO_CORO_YIELD chan_.async_read_some(std::move(self));
                    }

                    // Process read messages
                    process_execute_rows(chan_, st_, err, diag_);
                    if (err)
                    {
                        self.complete(err);
                        BOOST_ASIO_CORO_YIELD break;
                    }
                }

                if (st_.should_read_head())
                {
                    BOOST_ASIO_CORO_YIELD async_read_resultset_head(chan_, st_, diag_, std::move(self));
                }
            }

            // Once everything has been read, convert the read rows into views so the user doesn't get offsets
            st_.rows().offsets_to_string_views();

            self.complete(error_code());
        }
    }
};

}  // namespace detail
}  // namespace mysql
}  // namespace boost

template <class Stream>
void boost::mysql::detail::execute(
    channel<Stream>& channel,
    error_code fast_fail,
    resultset_encoding enc,
    results& result,
    error_code& err,
    diagnostics& diag
)
{
    auto& st = results_access::get_impl(result);
    start_execution(channel, fast_fail, enc, st, err, diag);
    if (err)
        return;

    while (!st.complete())
    {
        while (st.should_read_rows())
        {
            // Ensure we have messages to be read
            if (!channel.has_read_messages())
            {
                channel.read_some(err);
                if (err)
                    return;
            }

            // Process read messages
            process_execute_rows(channel, st, err, diag);
            if (err)
                return;
        }

        if (st.should_read_head())
        {
            read_resultset_head(channel, st, err, diag);
            if (err)
                return;
        }
    }

    // Once everything has been read, convert the read rows into views so the user doesn't get offsets
    st.rows().offsets_to_string_views();
}

template <class Stream, BOOST_ASIO_COMPLETION_TOKEN_FOR(void(::boost::mysql::error_code)) CompletionToken>
BOOST_ASIO_INITFN_AUTO_RESULT_TYPE(CompletionToken, void(boost::mysql::error_code))
boost::mysql::detail::async_execute(
    channel<Stream>& chan,
    error_code fast_fail,
    resultset_encoding enc,
    results& result,
    diagnostics& diag,
    CompletionToken&& token
)
{
    return boost::asio::async_compose<CompletionToken, void(boost::mysql::error_code)>(
        execute_op<Stream>(chan, fast_fail, enc, results_access::get_impl(result), diag),
        token,
        chan
    );
}

#endif /* INCLUDE_BOOST_MYSQL_DETAIL_NETWORK_ALGORITHMS_IMPL_EXECUTE_QUERY_HPP_ */
