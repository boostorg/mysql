//
// Copyright (c) 2019-2023 Ruben Perez Hidalgo (rubenperez038 at gmail dot com)
//
// Distributed under the Boost Software License, Version 1.0. (See accompanying
// file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
//

#ifndef BOOST_MYSQL_DETAIL_NETWORK_ALGORITHMS_IMPL_EXECUTE_HPP
#define BOOST_MYSQL_DETAIL_NETWORK_ALGORITHMS_IMPL_EXECUTE_HPP

#pragma once

#include <boost/mysql/detail/network_algorithms/execute.hpp>
#include <boost/mysql/detail/network_algorithms/read_resultset_head.hpp>
#include <boost/mysql/detail/network_algorithms/start_execution.hpp>
#include <boost/mysql/detail/protocol/deserialize_row.hpp>
#include <boost/mysql/detail/protocol/execution_state_impl.hpp>

#include <boost/asio/coroutine.hpp>

namespace boost {
namespace mysql {
namespace detail {

template <class Stream>
struct execute_op : boost::asio::coroutine
{
    channel<Stream>& chan_;
    error_code fast_fail_;
    std::unique_ptr<execution_request> req_;
    execution_state_impl& st_;
    diagnostics& diag_;

    execute_op(
        channel<Stream>& chan,
        error_code fast_fail,
        std::unique_ptr<execution_request> req,
        execution_state_impl& st,
        diagnostics& diag
    ) noexcept
        : chan_(chan), fast_fail_(fast_fail), req_(std::move(req)), st_(st), diag_(diag)
    {
    }

    template <class Self>
    void operator()(Self& self, error_code err = {})
    {
        // Error checking
        if (err)
        {
            self.complete(err);
            return;
        }

        // Normal path
        BOOST_ASIO_CORO_REENTER(*this)
        {
            BOOST_ASIO_CORO_YIELD
            async_start_execution(chan_, fast_fail_, true, std::move(req_), st_, diag_, std::move(self));

            while (!st_.complete())
            {
                while (st_.should_read_rows())
                {
                    // Ensure we have messages to be read
                    if (!chan_.has_read_messages())
                    {
                        BOOST_ASIO_CORO_YIELD chan_.async_read_some(std::move(self));
                    }

                    // Process read messages
                    process_execute_rows(chan_, st_, err, diag_);
                    if (err)
                    {
                        self.complete(err);
                        BOOST_ASIO_CORO_YIELD break;
                    }
                }

                if (st_.should_read_head())
                {
                    BOOST_ASIO_CORO_YIELD async_read_resultset_head(chan_, st_, diag_, std::move(self));
                }
            }

            // Once everything has been read, convert the read rows into views so the user doesn't get offsets
            st_.rows_.offsets_to_string_views();

            self.complete(error_code());
        }
    }
};

// Read this as "process rows generated by execute"
inline void process_execute_rows(
    channel_base& chan,
    execution_state_impl& st,
    error_code& err,
    diagnostics& diag
)
{
    assert(chan.has_read_messages());

    std::size_t num_fields_before = st.rows_.fields_.size();
    std::size_t num_processed_fields = 0;

    while (chan.has_read_messages() && st.should_read_rows())
    {
        // Get the row message
        auto message = chan.next_read_message(st.sequence_number(), err);
        if (err)
            return;

        // Deserialize the row. Fields are stored in st.
        // TODO: raw access to fields here is bad
        deserialize_row(message, chan.current_capabilities(), chan.flavor(), st, st.rows_.fields_, err, diag);
        if (err)
            return;

        st.on_row();
        num_processed_fields += st.current_resultset_meta().size();
    }

    // Copy any string field into st, as the network buffer will be overwritten
    st.rows_.copy_strings_as_offsets(num_fields_before, num_processed_fields);
}

}  // namespace detail
}  // namespace mysql
}  // namespace boost

template <class Stream>
void boost::mysql::detail::execute(
    channel<Stream>& channel,
    error_code fast_fail,
    const execution_request& req,
    execution_state_impl& st,
    error_code& err,
    diagnostics& diag
)
{
    err = start_execution(channel, fast_fail, true, req, st, err, diag);
    if (err)
        return;

    while (!st.complete())
    {
        while (st.should_read_rows())
        {
            // Ensure we have messages to be read
            if (!channel.has_read_messages())
            {
                channel.read_some(err);
                if (err)
                    return;
            }

            // Process read messages
            process_execute_rows(channel, st, err, diag);
            if (err)
                return;
        }

        if (st.should_read_head())
        {
            read_resultset_head(channel, st, err, diag);
            if (err)
                return;
        }
    }

    // Once everything has been read, convert the read rows into views so the user doesn't get offsets
    st.rows_.offsets_to_string_views();
}

template <class Stream, BOOST_ASIO_COMPLETION_TOKEN_FOR(void(::boost::mysql::error_code)) CompletionToken>
BOOST_ASIO_INITFN_AUTO_RESULT_TYPE(CompletionToken, void(boost::mysql::error_code))
boost::mysql::detail::async_execute(
    channel<Stream>& chan,
    error_code fast_fail,
    std::unique_ptr<execution_request> req,
    execution_state_impl& st,
    diagnostics& diag,
    CompletionToken&& token
)
{
    return boost::asio::async_compose<CompletionToken, void(boost::mysql::error_code)>(
        execute_op<Stream>(chan, fast_fail, std::move(req), st, diag),
        token,
        chan
    );
}

#endif /* INCLUDE_BOOST_MYSQL_DETAIL_NETWORK_ALGORITHMS_IMPL_EXECUTE_QUERY_HPP_ */
